import ketai.camera.*;
import ketai.cv.facedetector.*;
import ketai.data.*;
import ketai.net.*;
import ketai.net.bluetooth.*;
import ketai.net.nfc.*;
import ketai.net.nfc.record.*;
import ketai.net.wifidirect.*;
import ketai.sensors.*;
import ketai.ui.*;


import processing.serial.*;
Serial serial;


String stringGyroX;
String stringGyroY;
String stringAccX;
String stringAccY;
String stringCompX;
String stringCompY;
String stringKalmanX;
String stringKalmanY;

final int width = 800;
final int height = 600;

float[] gyroX = new float[width];
float[] gyroY = new float[width];

float[] accX = new float[width];
float[] accY = new float[width];

float[] compX = new float[width];
float[] compY = new float[width];

float[] kalmanX = new float[width];
float[] kalmanY = new float[width];

boolean drawValues  = false;

void setup() {
  size(800, 600);
  println(Serial.list()); // Use this to print connected serial devices
  String portName = "/dev/cu.HC-05-DevB";
  serial = new Serial(this,portName, 9600); // Set this to your serial port obtained using the line above
  serial.write('r');
  serial.bufferUntil('\n'); // Buffer until line feed

  for (int i = 0; i < width; i++) { // center all variables
    gyroX[i] = height/2;
    gyroY[i] = height/2;
    accX[i] = height/2;
    accY[i] = height/2;
    compX[i] = height/2;
    compY[i] = height/2;
    kalmanX[i] = height/2;
    kalmanY[i] = height/2;
  }

  drawGraph(); // Draw graph at startup
}

void draw() {
  /* Draw Graph */
  if (drawValues) {
   // drawValues = false;
    drawGraph();
  }
}

void drawGraph() {
  background(255); // White
  for (int i = 0; i < width; i++) {
    stroke(200); // Grey
    line(i*10, 0, i*10, height);
    line(0, i*10, width, i*10);
  }

  stroke(0); // Black
  for (int i = 1; i <= 3; i++)
    line(0, height/4*i, width, height/4*i); // Draw line, indicating -90 deg, 0 deg and 90 deg

  convert();
  drawAxisX();
  drawAxisY();
}

void serialEvent (Serial serial) {
  // Get the ASCII strings:
  stringAccX = serial.readStringUntil('\t');
  stringGyroX = serial.readStringUntil('\t');
  stringCompX = serial.readStringUntil('\t');
  stringKalmanX = serial.readStringUntil('\t');

  serial.readStringUntil('\t'); // Ignore extra tab

  stringAccY = serial.readStringUntil('\t');
  stringGyroY = serial.readStringUntil('\t');
  stringCompY = serial.readStringUntil('\t');
  stringKalmanY = serial.readStringUntil('\t');

  serial.clear(); // Clear buffer
  drawValues = true; // Draw the graph

  printAxis(); // Used for debugging
}

void printAxis() {
  print(stringGyroX);
  print(stringAccX);
  print(stringCompX);
  print(stringKalmanX);

  print('\t');

  print(stringGyroY);
  print(stringAccY);
  print(stringCompY);
  print(stringKalmanY);

  println();
}
//convert all axis
final int minAngle = -180;
final int maxAngle = 180;

void convert() {
  /* Convert the gyro x-axis */
  if (stringGyroX != null) {
    stringGyroX = trim(stringGyroX); // Trim off any whitespace
    gyroX[gyroX.length - 1] = map(float(stringGyroX), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the gyro y-axis */
  if (stringGyroY != null) {
    stringGyroY = trim(stringGyroY); // Trim off any whitespace
    gyroY[gyroY.length - 1] = map(float(stringGyroY), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the accelerometer x-axis */
  if (stringAccX != null) {
    stringAccX = trim(stringAccX); // Trim off any whitespace
    accX[accX.length - 1] = map(float(stringAccX), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the accelerometer y-axis */
  if (stringAccY != null) {
    stringAccY = trim(stringAccY); // Trim off any whitespace
    accY[accY.length - 1] = map(float(stringAccY), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the complementary filter x-axis */
  if (stringCompX != null) {
    stringCompX = trim(stringCompX); // Trim off any whitespace
    compX[compX.length - 1] = map(float(stringCompX), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the complementary filter x-axis */
  if (stringCompY != null) {
    stringCompY = trim(stringCompY); // Trim off any whitespace
    compY[compY.length - 1] = map(float(stringCompY), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the kalman filter x-axis */
  if (stringKalmanX != null) {
    stringKalmanX = trim(stringKalmanX); // Trim off any whitespace
    kalmanX[kalmanX.length - 1] = map(float(stringKalmanX), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }

  /* Convert the kalman filter y-axis */
  if (stringKalmanY != null) {
    stringKalmanY = trim(stringKalmanY); // Trim off any whitespace
    kalmanY[kalmanY.length - 1] = map(float(stringKalmanY), minAngle, maxAngle, 0, height); // Convert to a float and map to the screen height, then save in buffer
  }
}
void drawAxisX() {
  /* Draw gyro x-axis */
  noFill();
  stroke(255, 255, 0); // Green
  // Redraw everything
  beginShape();
  vertex(0, gyroX[0]);
  for (int i = 1; i < gyroX.length; i++) {
    if ((gyroX[i] < height/4 && gyroX[i - 1] > height/4*3) || (gyroX[i] > height/4*3 && gyroX[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, gyroX[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < gyroX.length;i++)
    gyroX[i-1] = gyroX[i];

  /* Draw acceleromter x-axis */
  noFill();
  stroke(0, 255, 0); // Yellow
  // Redraw everything
  beginShape();
  vertex(0, accX[0]);
  for (int i = 1; i < accX.length; i++) {
    if ((accX[i] < height/4 && accX[i - 1] > height/4*3) || (accX[i] > height/4*3 && accX[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, accX[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < accX.length;i++)
    accX[i-1] = accX[i];

  /* Draw complementary filter x-axis */
  noFill();
  stroke(0, 0, 255); // Blue
  // Redraw everything
  beginShape();
  vertex(0, compX[0]);
  for (int i = 1; i < compX.length; i++) {
    if ((compX[i] < height/4 && compX[i - 1] > height/4*3) || (compX[i] > height/4*3 && compX[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, compX[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < compX.length; i++)
    compX[i-1] = compX[i];

  /* Draw kalman filter x-axis */
  noFill();
  stroke(255, 0, 0);// Red
  // Redraw everything
  beginShape();
  vertex(0, kalmanX[0]);
  for (int i = 1; i < kalmanX.length; i++) {
    if ((kalmanX[i] < height/4 && kalmanX[i - 1] > height/4*3) || (kalmanX[i] > height/4*3 && kalmanX[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, kalmanX[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < kalmanX.length; i++)
    kalmanX[i-1] = kalmanX[i];
}

void drawAxisY() {
  /* Draw gyro y-axis */
  noFill();
  stroke(255, 0, 255); // Purple
  // Redraw everything
  beginShape();
  vertex(0, gyroY[0]);
  for (int i = 1; i < gyroY.length; i++) {
    if ((gyroY[i] < height/4 && gyroY[i - 1] > height/4*3) || (gyroY[i] > height/4*3 && gyroY[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, gyroY[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < gyroY.length;i++)
   gyroY[i-1] = gyroY[i];

  /* Draw acceleromter y-axis */
  noFill();
  stroke(0, 255, 255); // Light blue
  // Redraw everything
  beginShape();
  vertex(0, accY[0]);
  for (int i = 1; i < accY.length; i++) {
    if ((accY[i] < height/4 && accY[i - 1] > height/4*3) || (accY[i] > height/4*3 && accY[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, accY[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < accY.length;i++)
    accY[i-1] = accY[i];

  /* Draw complementary filter y-axis */
  noFill();
  stroke(124, 252, 0); // Lawn Green
  // Redraw everything
  beginShape();
  vertex(0, compY[0]);
  for (int i = 1; i < compY.length; i++) {
    if ((compY[i] < height/4 && compY[i - 1] > height/4*3) || (compY[i] > height/4*3 && compY[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, compY[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i < compY.length;i++)
    compY[i-1] = compY[i];

  /* Draw kalman filter y-axis */
  noFill();
  stroke(0, 0, 0); // Black
  // Redraw everything
  beginShape();
  vertex(0, kalmanY[0]);
  for (int i = 1; i < kalmanY.length; i++) {
    if ((kalmanY[i] < height/4 && kalmanY[i - 1] > height/4*3) || (kalmanY[i] > height/4*3 && kalmanY[i - 1] < height/4)) {
      endShape();
      beginShape();
    }
    vertex(i, kalmanY[i]);
  }
  endShape();

  // Put all data one array back
  for (int i = 1; i<kalmanY.length;i++)
    kalmanY[i-1] = kalmanY[i];
}
